"""
Manipulador de sugest√µes para o NutriBot Evolve.
Respons√°vel por gerenciar sugest√µes de refei√ß√µes e mensagens motivacionais.
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))
from database.user_repository import UserRepository
from utils.meal_suggester import MealSuggester

class SuggestionHandler:
    """Classe para gerenciar sugest√µes de refei√ß√µes e mensagens motivacionais."""
    
    # Mensagens para intera√ß√£o com o usu√°rio
    MESSAGES = {
        'suggestion_intro': """
Aqui est√° uma sugest√£o de {meal_type} para sua dieta {diet_type}:

üçΩÔ∏è {suggestion_name}

üìù Descri√ß√£o: {suggestion_description}

üìä Valores nutricionais:
‚Ä¢ Calorias: {calories} kcal
‚Ä¢ Prote√≠nas: {protein}g
‚Ä¢ Carboidratos: {carbs}g
‚Ä¢ Gorduras: {fat}g

üë®‚Äçüç≥ Modo de preparo:
{recipe}

{motivation_message}
""",
        'no_suggestion': """
Desculpe, n√£o foi poss√≠vel encontrar uma sugest√£o espec√≠fica para sua dieta.
Por favor, tente novamente mais tarde ou escolha outro tipo de refei√ß√£o.
""",
        'motivation_message': """
Aqui est√° uma mensagem motivacional para te inspirar:

"{message}"

Continue se esfor√ßando! Voc√™ est√° no caminho certo. üí™
"""
    }
    
    # Mapeamento de tipos de refei√ß√£o para exibi√ß√£o
    MEAL_TYPE_DISPLAY = {
        'cafe_da_manha': 'caf√© da manh√£',
        'lanche_manha': 'lanche da manh√£',
        'almoco': 'almo√ßo',
        'lanche_tarde': 'lanche da tarde',
        'jantar': 'jantar',
        'ceia': 'ceia',
        'refeicao': 'refei√ß√£o'
    }
    
    # Mapeamento de tipos de dieta para exibi√ß√£o
    DIET_TYPE_DISPLAY = {
        'flexivel': 'flex√≠vel',
        'low_carb': 'low carb',
        'cetogenica': 'cetog√™nica',
        'vegetariana': 'vegetariana',
        'vegana': 'vegana'
    }
    
    def __init__(self):
        """Inicializa o manipulador de sugest√µes."""
        self.meal_suggester = MealSuggester()
    
    def handle_sugestao_command(self, update, context):
        """
        Manipula o comando /sugestao para fornecer uma sugest√£o de refei√ß√£o.
        
        Args:
            update: Objeto de atualiza√ß√£o do Telegram
            context: Contexto do Telegram
            
        Returns:
            str: Mensagem de resposta
        """
        user_id = update.effective_user.id
        
        # Verifica se o usu√°rio completou o onboarding
        user = UserRepository.get_user_by_id(user_id)
        if not user or not user['onboarding_complete']:
            return "Voc√™ precisa completar o cadastro inicial antes de receber sugest√µes. Use /iniciar para come√ßar."
        
        # Obt√©m o tipo de dieta do usu√°rio
        diet_type = user['diet_type']
        
        # Determina o tipo de refei√ß√£o com base na hora do dia (simplificado)
        import datetime
        current_hour = datetime.datetime.now().hour
        
        if 5 <= current_hour < 10:
            meal_type = 'cafe_da_manha'
        elif 10 <= current_hour < 12:
            meal_type = 'lanche_manha'
        elif 12 <= current_hour < 15:
            meal_type = 'almoco'
        elif 15 <= current_hour < 18:
            meal_type = 'lanche_tarde'
        elif 18 <= current_hour < 21:
            meal_type = 'jantar'
        else:
            meal_type = 'ceia'
        
        # Verifica se h√° argumentos adicionais (tipo de refei√ß√£o espec√≠fico)
        if context.args and len(context.args) > 0:
            arg = context.args[0].lower()
            if arg in ['cafe', 'caf√©', 'manha', 'manh√£']:
                meal_type = 'cafe_da_manha'
            elif arg in ['lanche', 'lanche_manha', 'lanche_tarde']:
                meal_type = 'lanche_tarde'  # Simplificado para qualquer lanche
            elif arg in ['almoco', 'almo√ßo']:
                meal_type = 'almoco'
            elif arg in ['jantar', 'janta']:
                meal_type = 'jantar'
            elif arg in ['ceia', 'noite']:
                meal_type = 'ceia'
        
        # Obt√©m uma sugest√£o de refei√ß√£o
        suggestion = self.meal_suggester.get_meal_suggestion(diet_type, meal_type)
        
        if not suggestion:
            return SuggestionHandler.MESSAGES['no_suggestion']
        
        # Obt√©m uma mensagem motivacional
        motivation_message = self.meal_suggester.get_motivation_message(user['goal'])
        
        # Retorna a mensagem com a sugest√£o
        return SuggestionHandler.MESSAGES['suggestion_intro'].format(
            meal_type=SuggestionHandler.MEAL_TYPE_DISPLAY.get(meal_type, 'refei√ß√£o'),
            diet_type=SuggestionHandler.DIET_TYPE_DISPLAY.get(diet_type, 'personalizada'),
            suggestion_name=suggestion['nome'],
            suggestion_description=suggestion['descricao'],
            calories=suggestion['calorias'],
            protein=suggestion['proteinas'],
            carbs=suggestion['carboidratos'],
            fat=suggestion['gorduras'],
            recipe=suggestion['receita'],
            motivation_message=motivation_message
        )
    
    def handle_motivacao_command(self, update, context):
        """
        Manipula o comando /motivacao para fornecer uma mensagem motivacional.
        
        Args:
            update: Objeto de atualiza√ß√£o do Telegram
            context: Contexto do Telegram
            
        Returns:
            str: Mensagem de resposta
        """
        user_id = update.effective_user.id
        
        # Verifica se o usu√°rio completou o onboarding
        user = UserRepository.get_user_by_id(user_id)
        if not user or not user['onboarding_complete']:
            return "Voc√™ precisa completar o cadastro inicial antes de receber mensagens motivacionais. Use /iniciar para come√ßar."
        
        # Obt√©m o objetivo do usu√°rio
        goal = user['goal']
        
        # Obt√©m uma mensagem motivacional
        message = self.meal_suggester.get_motivation_message(goal)
        
        # Retorna a mensagem motivacional
        return SuggestionHandler.MESSAGES['motivation_message'].format(
            message=message
        )
    
    def get_reminder_message(self, user_id, reminder_type):
        """
        Gera uma mensagem de lembrete com base no tipo de lembrete.
        
        Args:
            user_id (int): ID do usu√°rio no Telegram
            reminder_type (str): Tipo de lembrete
            
        Returns:
            str: Mensagem de lembrete
        """
        # Obt√©m os dados do usu√°rio
        user = UserRepository.get_user_by_id(user_id)
        if not user:
            return None
        
        # Obt√©m o tipo de dieta e objetivo do usu√°rio
        diet_type = user['diet_type']
        goal = user['goal']
        
        # Mapeia tipos de lembrete para tipos de refei√ß√£o
        meal_type_mapping = {
            'cafe_da_manha': 'cafe_da_manha',
            'lanche_manha': 'lanche_manha',
            'almoco': 'almoco',
            'lanche_tarde': 'lanche_tarde',
            'jantar': 'jantar',
            'ceia': 'ceia'
        }
        
        # Verifica se √© um lembrete de refei√ß√£o
        if reminder_type in meal_type_mapping:
            meal_type = meal_type_mapping[reminder_type]
            
            # Obt√©m uma sugest√£o de refei√ß√£o
            suggestion = self.meal_suggester.get_meal_suggestion(diet_type, meal_type)
            
            if suggestion:
                return f"""
‚è∞ Hora do seu {SuggestionHandler.MEAL_TYPE_DISPLAY.get(meal_type, 'refei√ß√£o')}!

Que tal experimentar: {suggestion['nome']}?
{suggestion['descricao']}

Use /refeicao para registrar o que voc√™ comer.
"""
            else:
                return f"""
‚è∞ Hora do seu {SuggestionHandler.MEAL_TYPE_DISPLAY.get(meal_type, 'refei√ß√£o')}!

Lembre-se de fazer escolhas saud√°veis e registrar sua refei√ß√£o usando /refeicao.
"""
        
        # Lembrete de √°gua
        elif reminder_type == 'agua':
            return """
üíß Lembrete de hidrata√ß√£o!

N√£o se esque√ßa de beber √°gua regularmente. A hidrata√ß√£o adequada √© essencial para o metabolismo e para a sa√∫de em geral.
"""
        
        # Lembrete de motiva√ß√£o
        elif reminder_type == 'motivacao':
            # Obt√©m uma mensagem motivacional
            message = self.meal_suggester.get_motivation_message(goal)
            
            return f"""
‚ú® Momento de motiva√ß√£o!

{message}

Continue firme em sua jornada! Voc√™ est√° fazendo um √≥timo trabalho.
"""
        
        return None
